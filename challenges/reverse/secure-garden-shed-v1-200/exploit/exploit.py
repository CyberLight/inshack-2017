#!/usr/bin/python3
import re, random, hashlib, requests, os
import zipfile

zip_url = "https://drive.google.com/uc?export=download&id=0BzPQ2skYzQgeOV94WGRqY3lTM28"
testing = False

bs_sign = b'.SGS'
bs_code = b'.code'
bs_data = b'.data'


def alive():
    if testing:
        with open(os.path.dirname(__file__) + '/../public-files/lock.sgsc', 'rb') as f:
            content = f.read()
    else:
        response = requests.get(zip_url)
        content = response.content
    sha256_returned = hashlib.sha256(content).hexdigest()
    if sha256_returned != "9252f06f46a278576222331c0490da6990918cb1b8c5920f6481631919faa26c":
        return content, False
    with open('/tmp/my1.zip', 'wb') as f:
        f.write(content)
    zip_ref = zipfile.ZipFile('/tmp/my1.zip', 'r')
    os.system('mkdir /tmp/my1')
    zip_ref.extractall('/tmp/my1')
    zip_ref.close()
    with open('/tmp/my1/lock.sgsc', 'rb') as f:
        content = f.read()
    os.system('rm -rf /tmp/my1*')
    return content, True


def exploitable(content):
    c_off = content.index(bs_code)
    d_off = content.index(bs_data)
    key = content[len(bs_sign)+1:c_off]
    data = content[d_off+len(bs_data):]
    clear = b''
    for k in range(0, len(data)):
        clear += bytes([data[k] ^ key[k % len(key)]])
    f_off = clear.index(b'INSA')
    flag = ""
    for k in range(f_off, len(clear)):
        flag += chr(clear[k])
        if chr(clear[k]) == '}':
            break
    with open(os.path.dirname(__file__) + '/../flag.txt') as f:
        correct_flag = f.read()
    return flag == correct_flag


if __name__ == "__main__":
    content, is_alive = alive()
    print(is_alive and exploitable(content))
